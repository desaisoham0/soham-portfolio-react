name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job 1: Install dependencies and cache
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  # Job 2: Code Quality Checks
  lint-and-format:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npx eslint src --ext .js,.jsx,.ts,.tsx --max-warnings 0
        continue-on-error: false

      - name: Check Prettier formatting
        run: npx prettier --check "src/**/*.{js,jsx,ts,tsx,css,md,json}"
        continue-on-error: false

  # Job 3: Type checking (if using TypeScript)
  type-check:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npx tsc --noEmit
        continue-on-error: true

  # Job 4: Security audit
  security-audit:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "üîç Running security audit..."
          echo "Checking for high severity vulnerabilities..."
          
          # Check for high severity issues (these should fail the build)
          if npm audit --audit-level=high > /dev/null 2>&1; then
            echo "‚úÖ No high severity vulnerabilities found"
          else
            echo "‚ùå High severity vulnerabilities found!"
            npm audit --audit-level=high
            exit 1
          fi
          
          # Check for moderate issues (warn but don't fail)
          echo ""
          echo "Checking for moderate severity vulnerabilities..."
          if npm audit --audit-level=moderate > /dev/null 2>&1; then
            echo "‚úÖ No moderate severity vulnerabilities found"
          else
            echo "‚ö†Ô∏è Moderate severity vulnerabilities found:"
            npm audit --audit-level=moderate || true
            echo ""
            echo "üí° Consider updating dependencies when possible"
            echo "   Run 'npm audit fix' or 'npm audit fix --force' locally"
          fi

      - name: Generate security report
        run: |
          echo "üìä Generating security report..."
          echo "Current audit status:" > security-report.txt
          npm audit >> security-report.txt 2>&1 || true
          
          echo "" >> security-report.txt
          echo "Dependencies overview:" >> security-report.txt
          npm list --depth=0 >> security-report.txt 2>&1 || true
          
          echo "Security report generated"
        continue-on-error: true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.txt
          retention-days: 30
        continue-on-error: true

  # Job 5: Build application
  build:
    runs-on: ubuntu-latest
    needs: [install, lint-and-format]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Check build output
        run: |
          if [ ! -d "build" ]; then
            echo "Build directory not found!"
            exit 1
          fi
          if [ ! -f "build/index.html" ]; then
            echo "index.html not found in build directory!"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/
          retention-days: 7

  # Job 6: Test Bundle Size
  bundle-analysis:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build/

      - name: Analyze bundle size
        run: |
          echo "Analyzing bundle size..."
          du -sh build/
          find build -name "*.js" -exec du -h {} \; | sort -hr
          find build -name "*.css" -exec du -h {} \; | sort -hr

      - name: Check bundle size limits
        run: |
          MAIN_JS_SIZE=$(find build -name "*.js" -not -path "*/node_modules/*" | xargs du -c | tail -1 | cut -f1)
          MAIN_CSS_SIZE=$(find build -name "*.css" -not -path "*/node_modules/*" | xargs du -c | tail -1 | cut -f1)
          
          echo "Main JS size: ${MAIN_JS_SIZE}KB"
          echo "Main CSS size: ${MAIN_CSS_SIZE}KB"
          
          # Set reasonable limits (adjust as needed)
          if [ "$MAIN_JS_SIZE" -gt 1000 ]; then
            echo "Warning: JS bundle size exceeds 1MB"
          fi
          if [ "$MAIN_CSS_SIZE" -gt 100 ]; then
            echo "Warning: CSS bundle size exceeds 100KB"
          fi

  # Job 7: Lighthouse CI (Performance Testing)
  lighthouse:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build/

      - name: Serve build and run Lighthouse
        run: |
          npx serve -s build -l 3000 &
          sleep 5
          npx lighthouse http://localhost:3000 --output=json --output-path=lighthouse-report.json --chrome-flags="--headless --no-sandbox"
          
      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: lighthouse-report.json

  # Job 8: Notify on Success/Failure
  notify:
    runs-on: ubuntu-latest
    needs: [build, security-audit, lighthouse, bundle-analysis]
    if: always()
    steps:
      - name: Notify success
        if: ${{ success() }}
        run: |
          echo "‚úÖ All checks passed successfully!"
          echo "üöÄ Vercel will automatically deploy your changes"
        
      - name: Notify failure
        if: ${{ failure() }}
        run: echo "‚ùå Some checks failed. Please review the logs."
